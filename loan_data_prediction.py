# -*- coding: utf-8 -*-
"""loan_data_prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Y3wZ-5v9XUpe8KlWFY71Tjz67WDV-cGc
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df=pd.read_csv('/content/loan_data.csv')
df.head()

# numerical staticstics
df.describe()

df.info()

"""#preprocessing dataset"""

df.isnull().sum()

# filling the values for numerical terms using mean
df['Loan_Amount_Term']=df['Loan_Amount_Term'].fillna(df['Loan_Amount_Term'].mean())
df['Credit_History']=df['Credit_History'].fillna(df['Credit_History'].mean())

#filling the categorical data
df['Gender']=df['Gender'].fillna(df['Gender'].mode()[0])
df['Dependents']=df['Dependents'].fillna(df['Dependents'].mode()[0])
df['Self_Employed']=df['Self_Employed'].fillna(df['Self_Employed'].mode()[0])

df.isnull().sum()

"""#Exploratory the dataset"""

df.hist(figsize=(15,15))
plt.show()

sns.countplot(df.columns)
plt.show()

sns.countplot(x=df['Loan_Status'])
plt.show()

type(3)

for i in df.columns:
  if(type(df[i])!=object):
    sns.countplot(x=df[i])
    plt.show()

"""Categorial data"""

sns.distplot(df['ApplicantIncome'])

for i in df.columns:
  if(type(df[i])==int):
    sns.distplot(df[i])
    plt.show()

# if you get graph in left sided then apply log to this attribute
df['LoanAmount']=np.log(df['LoanAmount'])

sns.distplot(df['LoanAmount'])

df['CoapplicantIncome']=np.log(df['CoapplicantIncome'])

sns.distplot(df['CoapplicantIncome'])

df['ApplicantIncome']=np.log(df['ApplicantIncome'])

sns.distplot(df['ApplicantIncome'])

df['Loan_Amount_Term']=np.log(df['Loan_Amount_Term'])
sns.distplot(df['Loan_Amount_Term'])

"""

>CREATION OF  NEW ATTRIBUTE


"""

df['TotalIncome']=df['ApplicantIncome']+df['CoapplicantIncome']
df.head()

df.info()

df.isnull().sum()

df['CoapplicantIncome']=df['CoapplicantIncome'].fillna(df['CoapplicantIncome'].mode()[0])

df['TotalIncome']=df['TotalIncome'].fillna(df['TotalIncome'].mode()[0])

sns.distplot(df['TotalIncome'])

df.isnull().sum()

sns.distplot(df['CoapplicantIncome'])

df['TotalIncome']=np.log(df['TotalIncome'])

sns.distplot(df['TotalIncome'])

"""#correlation matrix"""

numeric_type=df.select_dtypes(include=['int64','float64'])
numeric_type=numeric_type.corr()
sns.heatmap(numeric_type,annot=True,cmap='coolwarm')

df=df.drop(['ApplicantIncome'],axis=1)

df.head()

"""Label Encoding

"""

from sklearn.preprocessing import LabelEncoder
col=['Gender','Married','Dependents','Education','Self_Employed','Property_Area','Loan_Status']
le=LabelEncoder()
for i in col:
  df[i]=le.fit_transform(df[i])

df.head()

"""Train/Test split"""

col=['Loan_ID','Loan_Status']
x=df.drop(columns=col,axis=1)
y=df['Loan_Status']

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)

"""Model Training

"""

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score,confusion_matrix,classification_report
from sklearn.model_selection import cross_val_score
lr=LogisticRegression()
lr.fit(x_train,y_train)

print('the accuracy is:',lr.score(x_test,y_test)*100)
print('the cross validation is :',np.mean(cross_val_score(lr,x,y,cv=5))*100)

x.info()

from sklearn.tree import DecisionTreeClassifier
dt=DecisionTreeClassifier()
dt.fit(x_train,y_train)
print('the accuracy is:',dt.score(x_test,y_test)*100)
print('the cross validation is :',np.mean(cross_val_score(dt,x,y,cv=5))*100)

from sklearn.ensemble import RandomForestClassifier,ExtraTreesClassifier
rf=RandomForestClassifier()
rf.fit(x_train,y_train)
print('the accuracy is:',rf.score(x_test,y_test)*100)
print('the cross validation is :',np.mean(cross_val_score(rf,x,y,cv=5))*100)

et=ExtraTreesClassifier()
et.fit(x_train,y_train)
print('the accuracy is:',et.score(x_test,y_test)*100)
print('the cross validation is :',np.mean(cross_val_score(rf,x,y,cv=5))*100)

"""## hyperparamerter tuning

"""

model=RandomForestClassifier(n_estimators=500,min_samples_split=25,max_depth=7,max_features=1)
model.fit(x_train,y_train)
print('the accuracy is:',model.score(x_test,y_test)*100)
print('the cross validation is :',np.mean(cross_val_score(model,x,y,cv=5))*100)

"""## confusion matrix

"""

model=RandomForestClassifier()
model.fit(x_train,y_train)
y_pred=model.predict(x_test)
print(confusion_matrix(y_test,y_pred))

sns.heatmap(con)